enum UserStatus {
  PREREGISTER
  SUSPENDED
  ACTIVE
}

type User
  @model(
    mutations: {
      create: "createUser"
      update: "updateUser"
      delete: "deleteUser"
    }
    queries: { get: "getUser", list: null }
    subscriptions: null
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID! @primaryKey
  name: String!
  email: AWSEmail @index(name: "userByEmail", queryField: "getUserByEmail")
  phone: AWSPhone @index(name: "userByPhone", queryField: "getUserByPhone")
  status: UserStatus
    @index(
      name: "usersByStatusCreatedAt"
      queryField: "listUsersByStatusCreatedAt"
      sortKeyFields: ["createdAt"]
    )
  active: Boolean
  avatar: String
  search: String
  createdAt: AWSDateTime
  profile: Profile @hasOne(fields: ["id"])
  groups: [GroupUser] @hasMany(indexName: "groupsByUser", fields: ["id"])
  logs: [Log] @hasMany(indexName: "logsByUser", fields: ["id"])
}

enum GenderOptions {
  M
  F
  UNKNOWN
}

enum DocTypes {
  CPF
  CNPJ
  PASSPORT
}

type Profile
  @model(
    mutations: {
      create: "createProfile"
      update: "updateProfile"
      delete: "deleteProfile"
    }
    queries: { get: "getProfile", list: null }
    subscriptions: null
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  userID: ID! @primaryKey
  user: User @hasOne(fields: ["userID"])
  doc: String
  docType: DocTypes
  docProfession: String
  profession: String
  specialties: String
  subSpecialties: String
  bio: String
  gender: GenderOptions
  birth: AWSDate
  birthDay: String
    @index(name: "usersByBirthDay", queryField: "listUsersByBirthDay")
  notes: String
  allowCookiesPreference: Boolean
  allowCookiesStatistic: Boolean
}

type GroupUser
  @model(
    mutations: {
      create: "createGroupUser"
      update: null
      delete: "deleteGroupUser"
    }
    queries: { get: null, list: null }
    subscriptions: null
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID! @primaryKey
  group: String!
    @index(
      name: "usersByGroup"
      queryField: "listUsersByGroup"
      sortKeyFields: ["userID"]
    )
  userID: ID!
    @index(
      name: "groupsByUser"
      queryField: "listGroupsByUser"
      sortKeyFields: ["group"]
    )
  user: User @hasOne(fields: ["userID"])
  profileID: ID!
  profile: Profile @hasOne(fields: ["profileID"])
  createdAt: AWSDateTime
}

type Address
  @model(
    mutations: {
      create: "createAddress"
      update: "updateAddress"
      delete: "deleteAddress"
    }
    queries: { get: null, list: null }
    subscriptions: null
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID! @primaryKey
  userID: ID! @index(name: "addressesByUser", queryField: "listAddressesByUser")
  name: String
  reference: String
  street: String
  number: String
  complement: String
  zipcode: String
  neighborhood: String
  city: String
  state: String
  country: String
  addressPagarmeID: String
}

enum PaymentMethods {
  CREDIT
  DEBIT
  PIX
  ONDELIVERY
}

type PayMethod
  @model(
    mutations: {
      create: "createPayMethod"
      update: "updatePayMethod"
      delete: "deletePayMethod"
    }
    queries: { get: null, list: null }
    subscriptions: null
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID! @primaryKey
  userID: ID!
    @index(name: "payMethodsByUser", queryField: "listPayMethodsByUser")
  method: PaymentMethods!
  number: String
  holderName: String
  holderDocument: String
  expMonth: Int
  expYear: Int
  cvv: String
  brand: String
  label: String
  cardPagarmeID: String
}

enum LogSource {
  APP
}

type Log
  @model(
    mutations: { create: "createLog", update: null, delete: null }
    queries: { get: null, list: null }
    subscriptions: null
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID! @primaryKey
  userID: ID!
    @index(name: "logsByUser", queryField: null)
    @index(
      name: "logsByUserCreatedAt"
      queryField: "listLogsByUserCreatedAt"
      sortKeyFields: ["createdAt"]
    )
  source: LogSource!
    @index(
      name: "logsBySourceCreatedAt"
      queryField: "listLogsBySourceCreatedAt"
      sortKeyFields: ["createdAt"]
    )
  user: User @belongsTo(fields: ["userID"])
  title: String
  description: String
  manufacturer: String
  model: String
  osName: String
  osVersion: String
  platform: String
  uuid: String
  ip: String
  city: String
  region: String
  country: String
  provider: String
  lat: Float
  lng: Float
  createdAt: AWSDateTime
  isError: Boolean
}

type Config
  @model(
    mutations: { create: "createConfig", update: "updateConfig", delete: null }
    queries: { get: "getConfig", list: null }
    subscriptions: null
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID! @primaryKey
  googleAnalyticsID: String
  googleSiteVerification: String
  facebook: String
  twitter: String
  instagram: String
  youtube: String
  linkedin: String
  phoneSac: AWSPhone
  phoneWhatsapp: AWSPhone
}

enum MidiaTypes {
  AUDIO
  VIDEO
  IMAGE
  PDF
  DOC
  XLS
  FILE
  ZIP
}

type Midia
  @model(
    mutations: {
      create: "createMidia"
      update: "updateMidia"
      delete: "deleteMidia"
    }
    queries: { get: null, list: "listMidias" }
    subscriptions: null
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID! @primaryKey
  key: String! @index(name: "MidiaByKey", queryField: "listMidiaByKey")
  type: MidiaTypes
  title: String
  subTitle: String
  description: String
  link: String
  identifyText: String
}

type Notify
  @model(
    mutations: { create: "createNotify", update: null, delete: "deleteNotify" }
    queries: { get: null, list: null }
    subscriptions: null
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID! @primaryKey
  userID: ID!
    @index(
      name: "notifyByUserDate"
      queryField: "notifyByUserDate"
      sortKeyFields: ["date"]
    )
  date: AWSDateTime!
  content: String
  link: String
  viewed: Boolean
}