enum UserStatus {
  PREREGISTER
  SUSPENDED
  ACTIVE
}

type User
  @model(
    mutations: {
      create: "createUser"
      update: "updateUser"
      delete: "deleteUser"
    }
    queries: { get: "getUser", list: null }
    subscriptions: null
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID! @primaryKey 
  name: String!
  email: AWSEmail @index(name: "userByEmail", queryField: "getUserByEmail")
  phone: AWSPhone @index(name: "userByPhone", queryField: "getUserByPhone")
  status: UserStatus
    @index(
      name: "usersByStatusCreatedAt"
      queryField: "listUsersByStatusCreatedAt"
      sortKeyFields: ["createdAt"]
    )
  active: Boolean
  avatar: String
  search: String
  createdAt: AWSDateTime
  profile: Profile @hasOne(fields: ["id"])
  groups: [UserGroup] @hasMany(indexName: "groupsByUser", fields: ["id"])
  tags: [UserTag] @hasMany(indexName: "tagsByUser", fields: ["id"])
  logs: [Log] @hasMany(indexName: "logsByUser", fields: ["id"])
  posts: [Post] @hasMany(indexName: "postsByUser", fields: ["id"])
  comments: [Comment] @hasMany(indexName: "commentsByUser", fields: ["id"])
}

enum GenderOptions {
  M
  F
  UNKNOWN
}

enum DocTypes {
  CPF
  CNPJ
  PASSPORT
}

type Profile
  @model(
    mutations: {
      create: "createProfile"
      update: "updateProfile"
      delete: "deleteProfile"
    }
    queries: { get: "getProfile", list: null }
    subscriptions: null
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  userID: ID! @primaryKey
  user: User @hasOne(fields: ["userID"])
  doc: String
  docType: DocTypes
  docProfession: String
  profession: String
  specialties: String
  subSpecialties: String
  bio: String
  gender: GenderOptions
  birth: AWSDate
  birthDay: String
    @index(name: "usersByBirthDay", queryField: "listUsersByBirthDay")
  notes: String
  allowCookiesPreference: Boolean
  allowCookiesStatistic: Boolean
}

type UserGroup
  @model(
    mutations: {
      create: "createUserGroup"
      update: null
      delete: "deleteUserGroup"
    }
    queries: { get: null, list: null }
    subscriptions: null
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID! @primaryKey
  group: String!
    @index(
      name: "usersByGroup"
      queryField: "listUsersByGroupUser"
      sortKeyFields: ["userID"]
    )
  userID: ID!
    @index(
      name: "groupsByUser"
      queryField: "listGroupsByUserGroup"
      sortKeyFields: ["group"]
    )
  user: User @hasOne(fields: ["userID"])
}

type UserTag
  @model(
    mutations: {
      create: "createUserTag"
      update: null
      delete: "deleteUserTag"
    }
    queries: { get: null, list: null }
    subscriptions: null
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID! @primaryKey
  tagID: ID! @index(name: "usersByTag", queryField: "listUsersByTag")
  tag: Tag @hasOne(fields: ["tagID"])
  userID: ID! @index(name: "tagsByUser", queryField: "listTagsByUser")
  user: User @hasOne(fields: ["userID"])
}

enum TagTypes {
  MODALITIES
  SPECIALTIES
  REGIONS
  GROUPS
  AREAS
}

enum TagStatus {
  ON
  OFF
}

type Tag
  @model(
    mutations: { create: "createTag", update: "updateTag", delete: "deleteTag" }
    queries: { get: null, list: "listTags" }
    subscriptions: null
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID! @primaryKey
  name: String!
  type: TagTypes!
    @index(
      name: "tagsByType"
      queryField: "listTagsByTypeName"
      sortKeyFields: ["name"]
    )
  status: TagStatus!
    @index(
      name: "tagsByStatus"
      queryField: "listTagsByStatusName"
      sortKeyFields: ["name"]
    )
}

type Address
  @model(
    mutations: {
      create: "createAddress"
      update: "updateAddress"
      delete: "deleteAddress"
    }
    queries: { get: null, list: null }
    subscriptions: null
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID! @primaryKey
  userID: ID! @index(name: "addressesByUser", queryField: "listAddressesByUser")
  name: String
  reference: String
  street: String
  number: String
  complement: String
  zipCode: String
  neighborhood: String
  city: String
  state: String
  country: String
  addressPagarmeID: String
}

enum PaymentMethods {
  CREDIT
  DEBIT
  PIX
  ONDELIVERY
}

type PayMethod
  @model(
    mutations: {
      create: "createPayMethod"
      update: "updatePayMethod"
      delete: "deletePayMethod"
    }
    queries: { get: null, list: null }
    subscriptions: null
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID! @primaryKey
  userID: ID!
    @index(name: "payMethodsByUser", queryField: "listPayMethodsByUser")
  method: PaymentMethods!
  number: String
  holderName: String
  holderDocument: String
  expMonth: Int
  expYear: Int
  cvv: String
  brand: String
  label: String
  cardPagarmeID: String
}

type Log
  @model(
    mutations: { create: "createLog", update: null, delete: null }
    queries: { get: null, list: null }
    subscriptions: null
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID! @primaryKey
  userID: ID!
    @index(name: "logsByUser", queryField: null)
    @index(
      name: "logsByUserCreatedAt"
      queryField: "listLogsByUserCreatedAt"
      sortKeyFields: ["createdAt"]
    )
  user: User @belongsTo(fields: ["userID"])
  title: String
  description: String
  manufacturer: String
  model: String
  osName: String
  osVersion: String
  platform: String
  uuid: String
  ip: String
  city: String
  region: String
  country: String
  provider: String
  lat: Float
  lng: Float
  createdAt: AWSDateTime!
  isError: Boolean
}

type Config
  @model(
    mutations: { create: "createConfig", update: "updateConfig", delete: null }
    queries: { get: null, list: "listConfig" }
    subscriptions: null
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID! @primaryKey
  googleAnalyticsID: String
  googleSiteVerification: String
  facebook: String
  twitter: String
  instagram: String
  youtube: String
  linkedin: String
  phoneSac: AWSPhone
  WhatsApp: AWSPhone
}

enum MidiaTypes {
  AUDIO
  VIDEO
  IMAGE
  PDF
  DOC
  XLS
  FILE
  ZIP
}

type Midia
  @model(
    mutations: {
      create: "createMidia"
      update: "updateMidia"
      delete: "deleteMidia"
    }
    queries: { get: null, list: "listMidias" }
    subscriptions: null
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID! @primaryKey
  key: String! @index(name: "MidiaByKey", queryField: "listMidiasByKey")
  type: MidiaTypes
  title: String
  subTitle: String
  description: String
  link: String
  identifyText: String
}

type Notify
  @model(
    mutations: { create: "createNotify", update: null, delete: "deleteNotify" }
    queries: { get: null, list: null }
    subscriptions: null
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID! @primaryKey
  userID: ID!
    @index(
      name: "notifyByUserCreatedAt"
      queryField: "listNotifyByUserCreatedAt"
      sortKeyFields: ["createdAt"]
    )
  content: String
  link: String
  viewed: Boolean
  createdAt: AWSDateTime!
}


enum PostProviders {
  VIMEO
  S3
}

type Post
  @model(
    mutations: { create: "createPost", update: "updatePost", delete: "deletePost" }
    queries: { get: null, list: null }
    subscriptions: null
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID! @primaryKey
  type: PostProviders!
  title: String!
  description: String
  content: String
  vimeoCode: String
  videoKey: String
  thumbnail: String
  createdAt: AWSDateTime
  userID: ID! @index(name: "postsByUser", queryField: "listPostsByUserCreatedAt", sortKeyFields: ["createdAt"])
  user: User @belongsTo(fields: ["userID"])
  tags: [PostTag] @hasMany(indexName: "tagsByPost", fields: ["id"])
  comments: [Comment] @hasMany(indexName: "commentsByPost", fields: ["id"])
}

type PostTag
  @model(
    mutations: {
      create: "createPostTag"
      update: null
      delete: "deletePostTag"
    }
    queries: { get: null, list: null }
    subscriptions: null
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID! @primaryKey
  postID: ID! @index(name: "tagsByPost", queryField: "listTagsByPost")
  post: Post @hasOne(fields: ["postID"])
  tagID: ID! @index(name: "postsByTag", queryField: "listPostsByTag")
  tag: Tag @hasOne(fields: ["tagID"])
}

type Comment
  @model(
    mutations: {
      create: "createComment"
      update: "updateComment"
      delete: "deleteComment"
    }
    queries: { get: null, list: null }
    subscriptions: null
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID! @primaryKey
  postID: ID! @index(name: "commentsByPost", queryField: "listCommentsByPostCreatedAt", sortKeyFields: ["createdAt"])
  post: Post @belongsTo(fields: ["postID"])
  userID: ID! @index(name: "commentsByUser", queryField: "listCommentsByUserCreatedAt", sortKeyFields: ["createdAt"])
  user: User @belongsTo(fields: ["userID"])
  content: String!
  createdAt: AWSDateTime
}